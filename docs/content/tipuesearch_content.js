var tipuesearch = {"pages": [{'title': 'About', 'text': 'Course:  https://mde.tw/cd2020 \n KMOLab, Department of Mechanical Design Engineering, National Formosa University, Taiwan. \n This project is mainly used with  https://mde.tw/cd2020  repository to demonstrate how to apply Python and Dart programs to build web-based tools to enhance the effectiveness of the mechanical collaborative product design. \n Website:  https://mde.tw/cd2020pj1 \n Repository:  https://github.com/mdecourse/cd2020pj1 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '協同產品設計課程實習項目: \n \n OnShape 零組件繪圖及協同設定 \n \xa0零組件轉檔進入 CoppeliaSim \n CoppeliaSim 零組件轉入後之零件分割, 零件從屬關係組立與控制設定 \n 利用 CoppeliaSim Python Remote API 控制四輪車 \n 將 Remote API 程式結合 Flask + Oauth2 + SQLite 進行 網際機電控制程式開發 \n 利用 Ubuntu 20.04 虛擬主機, 進行網際協同機電系統操控模擬 \n 協同四輪車與平面機構系統產品整合開發 \n \n 1. OnShape 零組件繪圖及協同設定 \n https://learn.onshape.com/ \n 2. 零組件轉檔進入 CoppeliaSim \n Parasolid \n Parasolid-XT-format-reference_2006.pdf \n SAT \n Sat File format.pdf \n https://en.wikipedia.org/wiki/ACIS \n DXF, IGES and STEP \n DXF_IGES_STEP.pdf \n 3. CoppeliaSim 零組件轉入後之零件分割, 零件從屬關係組立與控制設定 \n 4. 利用 CoppeliaSim Python Remote API 控制四輪車 \n 5. 將 Remote API 程式結合 Flask + Oauth2 + SQLite 進行 網際機電控制程式開發 \n 6. 利用 Ubuntu 20.04 虛擬主機, 進行網際協同機電系統操控模擬 \n 7. 協同四輪車與平面機構系統產品整合開發 \n \n \n \n', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Streaming', 'text': '問卷: \n 請登入 ＠gm 帳號後, 填寫下列問卷. \n 第八與第九週上課是否繼續採用線上方式進行 \n 結果: \n \n 第十週之後的分組方式 \n \n 2a w7 Youtube + OBS live streaming video: \n \n \n 2b Meet + Youtube +OBS \n \n \n \n W8 \n 2a \n https://drive.google.com/file/d/1K-_MyctzaYgrCBvMSaSGbiv8RNH81wSl/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/1Rj12vxv72whk_cHXc5mHvOURB8bNIJJN/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n 2b \n https://drive.google.com/file/d/1G2L6yKkHrviF9CbZnjp8bXLAWJEmQBUM/view?usp=sharing \xa0(登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/1GaIy77PYW7hxr4TB6noSuvtShA-6rKfA/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n W9 期中考週線上課程進行步驟: \n \n 老師與組長開會, 開放 live streaming, 回答與課程相關問題. \n 要求所有學員, 透過個人行事曆建立 Google Handout Meet 會議, 展示個人桌面操作, 開放 live stream, 並錄製至少 10 分鐘的個人期中簡報影片, 說明個人於 W1-W8 所完成的相關內容. \n 完成上述個人簡報錄製後, 將存於個人 Google Drive 中的期中簡報 mp4 影片, 以共享設置為所有登入 @gm 帳號的用戶都可以觀看. \n 完成上述影片共享設置後, 請登入 @gm 個人帳號, 至  https://forms.gle/T1Vs4sv9EdetxoWF7 \xa0 填寫表單並完成期中個人自評成績登錄. \n 完成上述各步驟後, 將繼續進行線上課程之其他內容直播或錄影. \n \n 2a \n https://drive.google.com/file/d/1kmu5oLunO6_97dDLZoQ2OzGh29KeMH91/view?usp=sharing \xa0 (登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/120lV8i8yvKzEkF5kF2efpY-zuPc_G5kl/view?usp=sharing  (登入 @gm 帳號後可以在線觀看)', 'tags': '', 'url': 'Streaming.html'}, {'title': 'Windows', 'text': 'Use Firefox to conduct  https://meet.google.com  online meeting. Since we are using G Suite for Education, meeting recording and live stream functions are available. \n Use Firefox to connect to  https://youtube.com  and add live stream video with OBS streaming integrated withYoutube server.', 'tags': '', 'url': 'Windows.html'}, {'title': 'Ubuntu', 'text': 'Login to @gm account and download  Virtualbox appliance of Ubuntu 20.04  for CMSiMDE, Oauth2 and CoppeliaSim remote API program development. \n Install OBS for Ubuntu \n https://obsproject.com/wiki/install-instructions#ubuntu-installation  ', 'tags': '', 'url': 'Ubuntu.html'}, {'title': 'Mac', 'text': 'Use Safari to conduct  https://meet.google.com  online meeting. Since we are using G Suite for Education, meeting recording and live stream functions are available. \n Even with System Preferences to grant "Screen Recording" privacy setup, Firefox does not allow user to share screen operation during online Google Handout Meet session. \n Use Firefox to connect to  https://youtube.com  and add live stream video with OBS streaming integrated withYoutube server.', 'tags': '', 'url': 'Mac.html'}, {'title': 'CMS', 'text': 'Use Google + Domain API to setup login for @gm.nfu.edu.tw users \n https://console.developers.google.com \n Setup  OAuth 2.0 Client IDs  \n Use  https://github.com/authomatic/authomatic  to allow user login with Google or Github accounts.', 'tags': '', 'url': 'CMS.html'}, {'title': 'Flask', 'text': "Python and Flask \n Login to your gm email account and download  2019_ABeginnersGuideToPython3Programming.pdf \n Login to your gm email account and download  2019_BuildingRESTAPIsWithFlask.pdf \n Flask has two major components, Werkzeug and Jinja2. While Werkzeug is responsible for providing routing, debugging, and Web Server Gateway Interface (WSGI), Flask leverages Jinja2 as template engine. \n Basic Flask application: \n from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/') \ndef hello_world():\n    return 'Hello, From Flask!'\n\nif __name__== '__main__': \n\tapp.run() \n The preceding code imports the Flask library, initiates the application by creating an instance of the Flask class, declares the route, and then defines the function to execute when the route is called. This code is enough to start your first Flask application. \n The most important feature of REST is its statelessness, which simply means that neither the client nor the server has to know the state of each other to be able to communicate. In this way, both the client and the server can understand any message received without seeing the previous message. \n Realtime Communication \n https://www.vonage.com/resources/articles/real-time-communications/ \n https://www.fullstackpython.com/webrtc.html \n WebRTC \n https://av.tib.eu/media/20037 \n https://github.com/nanomosfet/WebRTC-Flask-server \n https://webrtchacks.com/webrtc-cv-tensorflow/ \n Streaming Server \n https://blog.miguelgrinberg.com/post/video-streaming-with-flask \n https://github.com/miguelgrinberg/flask-video-streaming \n https://opensource.com/article/19/1/gstreamer https://www.pyimagesearch.com/2019/04/15/live-video-streaming-over-network-with-opencv-and-imagezmq/ \n", 'tags': '', 'url': 'Flask.html'}, {'title': 'Dart', 'text': 'Use dart2js to compile Dart html program into javascript and interacted with Flask program. \n \n   Clear Canvas   Draw ROC   Draw USA \n \n WebRTC \n https://pub.dev/packages/flutter_webrtc \n https://github.com/cloudwebrtc/flutter-webrtc \n', 'tags': '', 'url': 'Dart.html'}, {'title': 'Database', 'text': '', 'tags': '', 'url': 'Database.html'}, {'title': 'Linkages', 'text': '\n \n', 'tags': '', 'url': 'Linkages.html'}, {'title': 'Solvespace', 'text': 'https://github.com/solvespace/solvespace \n', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Pyslvs-UI', 'text': 'https://github.com/KmolYuan/Pyslvs-UI \n', 'tags': '', 'url': 'Pyslvs-UI.html'}, {'title': 'Range3', 'text': 'https://github.com/Range-Software/range3 \n', 'tags': '', 'url': 'Range3.html'}, {'title': 'Mechatronics', 'text': '', 'tags': '', 'url': 'Mechatronics.html'}, {'title': 'Arduino', 'text': 'https://www.makerspaces.com/wp-content/uploads/2017/02/Arduino-For-Beginners-REV2.pdf \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'Picsimlab', 'text': 'https://github.com/lcgamboa/picsimlab \n Download  picsimlab_0_7_5_win64_setup.exe  (only for @gm users) \n', 'tags': '', 'url': 'Picsimlab.html'}, {'title': 'Unoardusim', 'text': 'https://www.sites.google.com/site/unoardusim/ \n Download  UnoArduSimV2.7.1.zip  (only for @gm users) \n', 'tags': '', 'url': 'Unoardusim.html'}, {'title': 'CoppeliaSim', 'text': 'https://www.coppeliarobotics.com/ \n Download\xa0 CoppeliaSim_Edu_V4_0_0_Win.zip  (for @gm users only) \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'RemoteAPI', 'text': 'Download\xa0 web_vrep2.zip  (for @gm users only) \n Download\xa0 CoppeliaSim_4_Self_Driving_Car_Simulation.7z  (for @gm users only) \n When execute python remote api, opencv-python and imutils modules are needed. \n pip install opencv-python \n pip install imutils \n DefaultCamera with threaded child script and start the simRemoteApi on port 19999. \n simRemoteApi.start(19999) \n Therefore user can control the simulated model through the CoppeliaSim_Server_IP on port 19999. \n clientID = vrep.simxStart(\'CoppeliaSim_Server_IP\',19999,True,True,5000,5) # Get the client ID \n Use \n While True: \n to replace \n for i in range(150): \n the image of the remote vision sensor will be sent to the remote API client through  https://pypi.org/project/opencv-python/ \n reading and display vision sensor image using python remoate api ( 來源 ) \n 改為 Python 3 相容 \n # -*- coding: utf-8 -*-\n"""\nCreated on Sun Jul 05 15:01:58 2015\n\n@author: ACSECKIN\n\npython -m pip install opencv-python\n"""\n\nimport vrep\nimport time\nimport cv2\nimport numpy as np\n\nvrep.simxFinish(-1)\n\nclientID = vrep.simxStart(\'127.0.0.1\', 19997, True, True, 5000, 5)\n\nif clientID!=-1:\n    print(\'Connected to remote API server\')\n    print(\'Vision Sensor object handling\')\n    res, v1 = vrep.simxGetObjectHandle(clientID, \'vs1\', vrep.simx_opmode_oneshot_wait)\n    print(\'Getting first image\')\n    err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v1, 0, vrep.simx_opmode_streaming)\n    while (vrep.simxGetConnectionId(clientID) != -1):\n        err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v1, 0, vrep.simx_opmode_buffer)\n        if err == vrep.simx_return_ok:\n            print("image OK!!!")\n            img = np.array(image,dtype=np.uint8)\n            img.resize([resolution[1],resolution[0],3])\n            cv2.imshow(\'image\',img)\n            if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n                break\n        elif err == vrep.simx_return_novalue_flag:\n            print("no image yet")\n            pass\n        else:\n          print(err)\nelse:\n  print("Failed to connect to remote API Server")\n  vrep.simxFinish(clientID)\n\ncv2.destroyAllWindows() \n pythonBubbleRob.pdf \n lua_one_link_remote_api.7z \n V-rep 系統目錄中的\xa0remoteApiConnections.txt 可以同時啟動多個 port 允許多 client 連線: \n // This file defines all the continuous remote API server services (started at remote API plugin initialization, i.e. V-REP start-up)\n//\n// Each remote API server service requires following 3 entries:\n//\n// portIndex@_port = xxxx               // where xxxx is the desired port number (below 19997 are preferred for server services starting at V-REP start-up)\n// portIndex@_debug = xxxx              // where xxxx is true or false\n// portIndex@_syncSimTrigger = xxxx     // where xxxx is true or false. When true, then the service will be pre-enabled for synchronous operation.\n//\n// In above strings, @ can be any number starting with 1. If more than one server service is required, then numbers need to be consecutive and starting with 1\n\n// Let\'s start a continuous remote API server service on port 19997:\nportIndex1_port             = 19997\nportIndex1_debug            = false\nportIndex1_syncSimTrigger   = true\n\nportIndex2_port             = 19998\nportIndex2_debug            = false\nportIndex2_syncSimTrigger   = true\n \n 在遠端的多台電腦, 可以利用 \n clientID = vrep.simxStart(\'Server_IP\', 19997, True, True, 5000, 5) \n 與 \n clientID = vrep.simxStart(\'Server_IP\', 19998, True, True, 5000, 5) \n 同時對 rempte API server 進行操控, 各 client 並可以透過上述程式取得 rempte API Server 運作時的影像, 以便利用各 client 中的 python 程式對遠端 V-rep 模擬進行遠端操控. \n 例如: 兩名使用者分別在不同電腦上對同一台 rempte API Server 中的不同四輪車模型進行操控. \n 以下為另外一個參考程式: \n import vrep\n\nprint(\'Program started\')\nvrep.simxFinish(-1) # just in case, close all opened connections\nclientID=vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5)\nif clientID!=-1:\n    print(\'Connected to remote API server\')\n    res,v0=vrep.simxGetObjectHandle(clientID,\'Vision_sensor\',vrep.simx_opmode_oneshot_wait)\n    res,v1=vrep.simxGetObjectHandle(clientID,\'PassiveVision_sensor\',vrep.simx_opmode_oneshot_wait)\n\n    res,resolution,image=vrep.simxGetVisionSensorImage(clientID,v0,0,vrep.simx_opmode_streaming)\n    while (vrep.simxGetConnectionId(clientID)!=-1):\n        res,resolution,image=vrep.simxGetVisionSensorImage(clientID,v0,0,vrep.simx_opmode_buffer)\n        if res==vrep.simx_return_ok:\n            res=vrep.simxSetVisionSensorImage(clientID,v1,image,0,vrep.simx_opmode_oneshot)\n    vrep.simxFinish(clientID)\nelse:\n    print(\'Failed connecting to remote API server\')\nprint(\'Program ended\') \n 此外 system 目錄下的\xa0usrset.txt 可以進行客製化設定 \n 參考資料 \n Virtual Experiments Design for Robotics Based on V-REP.pdf \n Pyrep: bringing V-rep to deep robot learning.pdf \n Controlling your robot with Python.pdf \n', 'tags': '', 'url': 'RemoteAPI.html'}, {'title': 'Self-driving car ex', 'text': '以下所使用的場景與原始控制程式: \n Download\xa0 CoppeliaSim_4_Self_Driving_Car_Simulation.7z  (for @gm users only) \n 設定 CoppeliaSim 目錄中的 remoteApiConnections.txt 檔, 啟動時開啟內建的 19997 與 19999 埠號. \n remoteApiConnections.txt \n // This file defines all the continuous remote API server services (started at remote API plugin initialization, i.e. CoppeliaSim start-up)\n//\n// Each remote API server service requires following 3 entries:\n//\n// portIndex@_port = xxxx               // where xxxx is the desired port number (below 19997 are preferred for server services starting at CoppeliaSim start-up)\n// portIndex@_debug = xxxx              // where xxxx is true or false\n// portIndex@_syncSimTrigger = xxxx     // where xxxx is true or false. When true, then the service will be pre-enabled for synchronous operation.\n//\n// In above strings, @ can be any number starting with 1. If more than one server service is required, then numbers need to be consecutive and starting with 1\n\n// Let\'s start a continuous remote API server service on port 19997:\nportIndex1_port             = 19997\nportIndex1_debug            = false\nportIndex1_syncSimTrigger   = true\n\nportIndex2_port             = 19999\nportIndex2_debug            = false\nportIndex2_syncSimTrigger   = true\n \n 然後利用 CoppeliaSim 已經開啟的 19999 埠號, 從 client 端以 Python remote API 程式控制遠端 Server 上的機電系統, 主要關鍵在於啟動連線, 開啟場景檔案, 然後啟動該場景的模擬後, 取得遠端模擬  vision sensor  的影像後進行 remote 操控: \n 有關 vision sensor 與 camera 的差異: \n Make sure not to mix-up vision sensors with  cameras . Following are the main differences: \n \n \n A vision sensor has a fixed resolution. A camera has no specific resolution (i.e. it adjusts automatically to the view size). \n A vision sensor\'s image content can be accessed via the  API , and image processing handles via  vision callback functions . A camera\'s image content is not directly available via the API. \n A vision sensor generally requires more CPU time and operates slower than cameras. \n A vision sensor can only display  renderable objects . A camera can display all  object types . \n \n \n Vision sensors are added to the  scene  with [menu bar --> Add --> Vision sensor]. \n clientID = vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5) # Get the client ID\nres=vrep.simxLoadScene(clientID,"Y:\\CoppeliaSim_4_Self_Driving_Car_Simulation\\sdc.ttt",0,vrep.simx_opmode_blocking)\nx =vrep.simxStartSimulation(clientID,vrep.simx_opmode_oneshot_wait)  \n 以下則為完整的 car_model.py: \n # -*- coding: utf-8 -*-\n"""\nCreated on Tue Jan 06 22:00:39 2015\n\n@author: Karan Vivek Bhargava\n"""\n#Import Libraries:\nimport vrep                  #V-rep library\nimport sys\nimport time                #used to keep track of time\nimport numpy as np         #array library\nimport cv2\nimport imutils\n\n# Model for the car with two variables throttle and steering\nclass CarControl():\n    def __init__(self, clientID, printFlag = False):\n        self.clientID = clientID;\n        # retrieve motor  handles\n        errorCode, self.steer_handle = vrep.simxGetObjectHandle(self.clientID, \'steer_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.motor_handle = vrep.simxGetObjectHandle(self.clientID, \'motor_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.fl_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'fl_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.fr_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'fr_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.bl_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'bl_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.br_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'br_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.camera_f_handle = vrep.simxGetObjectHandle(self.clientID, \'cam_f\', vrep.simx_opmode_oneshot_wait);\n        \n        vrep.simxGetVisionSensorImage(self.clientID, self.camera_f_handle, 0, vrep.simx_opmode_streaming)\n        print(\'Received Handles...\');\n\n        self.factor = 30/(2.68*3.6);\n        self.max_throttle = 19; # Kmph\n        self.max_reverse_throttle = -19; #Kmph\n        self.max_steer = 30; # Degrees\n\n        self.printFlag = printFlag;\n        \n        # Self test the camera\n        print(\'Setting up the camera system...\');\n        self.lastFrame = None;\n        err = 0;\n        while(err != 1):\n            err, self.lastFrame = self.get_image();\n        print(\'Camera setup successful.\')\n        \n\n    def set_throttle(self, target_speed):\n        if(target_speed > self.max_throttle):\n            target_speed = self.max_throttle;\n        elif(target_speed < self.max_reverse_throttle):\n            target_speed = self.max_reverse_throttle;\n        if(self.printFlag):\n            print(\'Setting throttle to\', target_speed);\n        speed = target_speed * self.factor;\n        errorCode = vrep.simxSetJointTargetVelocity(self.clientID, self.motor_handle, speed, vrep.simx_opmode_streaming);\n\n    def set_steering(self, steer_pos):\n        if(abs(steer_pos) > self.max_steer):\n            if(steer_pos > 0):\n                steer_pos = self.max_steer;\n            else:\n                steer_pos = -self.max_steer;\n        if(self.printFlag):\n            print(\'Setting steering to\', steer_pos);\n        # Convert to radians\n        steer_pos = np.deg2rad(steer_pos);        \n        errorCode = vrep.simxSetJointTargetPosition(self.clientID, self.steer_handle, steer_pos, vrep.simx_opmode_streaming);\n\n    def get_info(self):\n        # Check velocity\n        err, bl_wheel_vel = vrep.simxGetObjectFloatParameter(self.clientID, self.bl_brake_handle, vrep.sim_jointfloatparam_velocity, vrep.simx_opmode_streaming);\n        err, br_wheel_vel = vrep.simxGetObjectFloatParameter(self.clientID, self.br_brake_handle, vrep.sim_jointfloatparam_velocity, vrep.simx_opmode_streaming);\n        rear_wheel_velocity = ((bl_wheel_vel) + (br_wheel_vel))/2.0;\n        linear_velocity = rear_wheel_velocity * 0.09 * 3.6; # Kmph\n\n        throttle = linear_velocity;\n        steer_errorCode, steer_pos = vrep.simxGetJointPosition(self.clientID, self.steer_handle, vrep.simx_opmode_streaming);\n        if(self.printFlag):\n            print(\'Throttle:\', throttle, \'Steering:\', steer_pos);\n\n    def get_image(self):\n        err, resolution, image = vrep.simxGetVisionSensorImage(self.clientID, self.camera_f_handle, 0, vrep.simx_opmode_buffer);\n        if err == vrep.simx_return_ok:\n            img = np.array(image,dtype=np.uint8);\n            img.resize([resolution[1],resolution[0],3]);\n            self.lastFrame = imutils.rotate_bound(img, 90);\n            return 1, self.lastFrame;\n        elif err == vrep.simx_return_novalue_flag:\n            return 0, None;\n        else:\n            return err, None;\n\nvrep.simxFinish(-1) # just in case, close all opened connections\nclientID = vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5) # Get the client ID\nres=vrep.simxLoadScene(clientID,"Y:\\CoppeliaSim_4_Self_Driving_Car_Simulation\\sdc.ttt",0,vrep.simx_opmode_blocking)\nx =vrep.simxStartSimulation(clientID,vrep.simx_opmode_oneshot_wait) \n\nif clientID!=-1:  #check if client connection successful\n    print(\'Connected to remote API server\')\n    \nelse:\n    print(\'Connection not successful\')\n    sys.exit(\'Could not connect\')\n\n# Initialize car control object\ncar = CarControl(clientID, printFlag = False);\ncar.set_steering(20); # Degrees\ncar.set_throttle(1);  # Kmph\n\nfor i in range(150):\n    # Start time for image process\n    start = time.time();\n\n    err, img = car.get_image();\n\n    # End time for image process\n    end = time.time();\n\n    dt = end - start;\n    print(\'Frame took:\', dt*1000.0, \'ms\');\n    cv2.imshow(\'image\',img);\n    cv2.waitKey(1); # in milliseconds\n     \n', 'tags': '', 'url': 'Self-driving car ex.html'}, {'title': 'Webots', 'text': 'https://cyberbotics.com/ \n \n \n', 'tags': '', 'url': 'Webots.html'}]};