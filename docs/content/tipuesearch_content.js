var tipuesearch = {"pages": [{'title': 'About', 'text': 'Course:  https://mde.tw/cd2020 \n KMOLab, Department of Mechanical Design Engineering, National Formosa University, Taiwan. \n This project is mainly used with  https://mde.tw/cd2020  repository to demonstrate how to apply Python and Dart programs to build web-based tools to enhance the effectiveness of the mechanical collaborative product design. \n Website:  https://mde.tw/cd2020pj1 \n Repository:  https://github.com/mdecourse/cd2020pj1 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '協同產品設計課程實習項目: \n 1. OnShape 零組件繪圖及協同設定 \n https://learn.onshape.com/ \n 2. 零組件轉檔進入 CoppeliaSim \n Parasolid \n Parasolid-XT-format-reference_2006.pdf \n SAT \n Sat File format.pdf \n https://en.wikipedia.org/wiki/ACIS \n DXF, IGES and STEP \n DXF_IGES_STEP.pdf \n 3. CoppeliaSim 零組件轉入後之零件分割, 零件從屬關係組立與控制設定 \n 4. 利用 CoppeliaSim Python Remote API 控制四輪車 \n 五專網際內容管理系統中使用的可攜程式下載  (登入 @gm) \n https://www.coppeliarobotics.com/helpFiles/en/remoteApiClientSide.htm \n https://programmer.group/v-rep-adding-vision-sensor-and-image-acquisition.html \n https://gist.github.com/mstfldmr/45d6e47bb661800b982c39d30215bc88 \n https://stackoverflow.com/questions/52325679/flask-opencv-send-and-receive-images-in-bytes \n 5. 將 Remote API 程式結合 Flask + Oauth2 + SQLite 進行 網際機電控制程式開發 \n https-server.py \n from flask import Flask, render_template\nimport ssl\n\ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\ncontext.load_cert_chain(\'./../cd2020.crt\', \'./../cd2020.key\')\n\napp = Flask(__name__)\n\n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n\n@app.route(\'/drawROC\')\ndef drawROC():\n    return render_template("drawROC.html")\n    \nif __name__== \'__main__\': \n\tapp.run(ssl_context=context) \n http-server.py \n from flask import Flask, render_template, send_from_directory\n\n# for randomgrouping\nimport random\nimport requests\n\napp = Flask(__name__)\n\n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n    \n@app.route(\'/drawROC\')\ndef drawROC():\n    return render_template("drawROC.html")\n    \n# setup static directory\n@app.route(\'/static/<path:path>\')\ndef send_static(path):\n    return send_from_directory(\'static\', path)\n    \n@app.route("/randomgrouping")\ndef randomGrouping():\n    # url to get the student number data\n    target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"\n    # use requests to retrieve data from url\n    f = requests.get(target_url)\n    # get student list from target_url\n    # use splitlines() to put student number into studList\n    studList = f.text.splitlines()\n    # minimum number for each group\n    num_in_one_group = 10\n    # temp list to save the student number for each group\n    gpList = []\n    # whole class list\n    group = []\n    # number of member list for each group\n    numList = []\n    # get numList\n    numList = getNumList(len(studList), num_in_one_group)\n    # check numList\n    # list numList\n    #print("Expected number of member list:" + str(numList))\n    \n    output = ""\n    gth = 1\n    inc = 0\n    \n    # use shuffle method of random module to shuffle studList\n    random.shuffle(studList)\n    output += "Before sort: <br />"\n    for i in numList:\n        # print 20 * sign\n        output += \'=\' * 20 + "<br />";\n        output += "group " + str(gth) + " has " + str(i) + " members:<br />"\n        # reset group list\n        gpList = []\n        for j in range(i):\n            output += studList[j+inc] + "<br />"\n            # append student number into grpList\n            gpList.append(studList[j+inc])\n\n        gth = gth + 1\n        inc = inc + j\n        # sort gpList\n        gpList.sort()\n        group.append(gpList)\n\n    # print output which is the result before sorting\n    print(output)\n    # print group whis is the sorted result\n    print("Sorted result:" + str(group))\n\n    output = ""\n    # output sorted result\n    output += \'=\' * 20 + "<br />"\n    output += \'Sorted result:<br />\'\n    gth = 1\n\n    # list sorted data seperated by \\n\n    for i in range(len(group)):\n        # print seperated mark\n        output += \'=\' * 20 + "<br />"\n        output += "group" + str(gth) + "<br />"\n        gpList = []\n\n        for j in range(len(group[i])):\n            output += str(group[i][j]) + "<br />"\n\n        gth = gth + 1\n\n    return output\n\n# get the distributed list among each group\ndef getNumList(total, eachGrp=10):\n    # total is the number of students\n    # each group at least 10 students\n    #eachGrp = 10;\n    # may divide into "grpNum" number of group\n    grpNum = total // eachGrp;\n    # check grpNum\n    #print(grpNum)\n    # vacan list\n    splits = []\n    # find remainder when total number divid into "grpNum" number of group\n    remainder = total % grpNum\n    # number of people in one group by calculation\n    calGrp = total // grpNum\n\n    for i in range(grpNum):\n        splits.append(calGrp)\n\n    # check first splits\n    #print(splits)\n\n    for i in range(remainder):\n        splits[i] += 1\n\n    # check final splits\n    #print(splits);\n    return splits;\n\n    \nif __name__== \'__main__\': \n\tapp.run() \n Oauth2 設定: \n 設定網址: https://console.developers.google.com   總共有兩項設定: 1. 啟用 Google + API 2. 然後到憑證處建立專案, 設定授權的 URI \n Flask and SQLite: \n https://flask.palletsprojects.com/en/1.1.x/patterns/sqlite3/ \n 6. 利用 Ubuntu 20.04 虛擬主機, 進行網際協同機電系統操控模擬 \n Login to @gm account and download  Virtualbox appliance of Ubuntu 20.04  for CMSiMDE, Oauth2 and CoppeliaSim remote API program development. \n 7. 協同四輪車與平面機構系統產品整合開發 \n https://stackoverflow.com/questions/42787927/displaying-opencv-image-using-python-flask \n import vrep\n\nprint(\'Program started\')\nvrep.simxFinish(-1) # just in case, close all opened connections\nclientID=vrep.simxStart(\'127.0.0.1\',19997,True,True,5000,5)\nif clientID!=-1:\n    print(\'Connected to remote API server\')\n    # relative to remote API client location, relative path:\n    vrep.simxLoadScene(clientID,\'test/testScene.ttt\',0xFF,vrep.simx_opmode_blocking)\n    # relative to V-REP executable location, relative path:\n    vrep.simxLoadScene(clientID,\'scenes/collisionDetectionDemo.ttt\',0x00,vrep.simx_opmode_blocking)\n    # relative to remote API client location, absolute path:\n    vrep.simxLoadScene(clientID,\'c:/python27/test/testScene.ttt\',0xFF,vrep.simx_opmode_blocking)\n    # relative to V-REP executable location, absolute path:\n    vrep.simxLoadScene(clientID,\'d:/v_rep/qrelease/release/scenes/collisionDetectionDemo.ttt\',0x00,vrep.simx_opmode_blocking)\n    vrep.simxFinish(clientID)\nelse:\n    print(\'Failed connecting to remote API server\')\nprint(\'Program ended\') \n Firewall \n', 'tags': '', 'url': 'Tasks.html'}, {'title': 'git', 'text': '為了避免將 git 推送 credential 存入 控制台\\使用者帳戶\\認證管理員, 可以利用 \n git config --edit --system \n 在 vi 編輯器環境中移除 git 近端的 credential - helper 設定. \n \n \n', 'tags': '', 'url': 'git.html'}, {'title': 'Firewall', 'text': '讓 Windows 10 可以接受 ping 封包 \n 進入防火牆進階設定: \n 檔案及印表機共用 (回應要求 - ICMPv4-In) 私人, 公用與網域的防火牆權限開啟 \n 檔案及印表機共用 (回應要求 - ICMPv6-In) 私人, 公用與網域的防火牆權限開啟 \n', 'tags': '', 'url': 'Firewall.html'}, {'title': 'Virtualbox', 'text': '由於每一個虛擬主機的硬碟檔案必須擁有一個獨立的 UUID, 因此若複製虛擬硬碟檔案後, 必須利用 \n "c:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe" internalcommands sethduuid win10_64_comsol5.5.vmdk \n 指令更改虛擬硬碟檔案的 UUID, 才能配置在同一 Virtualbox 系統下. \n 虛擬主機的網路設定 \n NAT \n NAT 代表 Network Address Translation, etwork Address Translation, 在 Virtualbox 中的虛擬主機網路設為 NAT 時, 除了虛擬主機本身可以透過 Host 連外網路上網外, 還可以透過虛擬主機 Network 中動態設定 Port Forwarding, 讓 Windows Host 可以作為 Client 端. 以所設定的埠號對應連線. \n NAT 常用的 Port Forwarding 為 SSH 22, 與開發 CMSiMDE 套件常用的 7443, 8443, 9443 與 8444 等. \n Host only \n 主要用來建立 Windows 網路內部的伺服器主機, 其服務對象只限於 Windows Host \n Bridged \n 主要用來建立能夠與 Windows 網路位階相同的外部伺服器主機, 其服務對象可以擴及 Windows Host 的網路之外的區域網路或廣域網路上的 Client 端.', 'tags': '', 'url': 'Virtualbox.html'}, {'title': 'OpenCV', 'text': "https://stackoverflow.com/questions/38030263/how-to-send-an-image-from-flask-server-to-javascript-display-on-frontend/40307539#40307539 \n https://stackoverflow.com/questions/46373163/passing-a-cv2-frame-from-view-to-template   \n @app.route('/image')\ndef image():\n    img = cv2.imread('raw.png')\n    data = cv.imencode('.png', img)[1].tobytes()\n    return Response(b'--frame\\r\\n' b'Content-Type: image/jpeg\\r\\n\\r\\n' + data + b'\\r\\n\\r\\n', mimetype='multipart/x-mixed-replace; boundary=frame' \n", 'tags': '', 'url': 'OpenCV.html'}, {'title': 'Streaming', 'text': '問卷: \n 請登入 ＠gm 帳號後, 填寫下列問卷. \n 第八與第九週上課是否繼續採用線上方式進行 \n 結果: \n \n 第十週之後的分組方式 \n \n', 'tags': '', 'url': 'Streaming.html'}, {'title': 'W7-W11', 'text': '2a w7 Youtube + OBS live streaming video: \n \n \n 2b Meet + Youtube +OBS \n \n \n \n W8 \n 2a \n https://drive.google.com/file/d/1K-_MyctzaYgrCBvMSaSGbiv8RNH81wSl/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/1Rj12vxv72whk_cHXc5mHvOURB8bNIJJN/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n 2b \n https://drive.google.com/file/d/1G2L6yKkHrviF9CbZnjp8bXLAWJEmQBUM/view?usp=sharing \xa0(登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/1GaIy77PYW7hxr4TB6noSuvtShA-6rKfA/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n W9 期中考週線上課程進行步驟: \n \n 老師與組長開會, 開放 live streaming, 回答與課程相關問題. \n 要求所有學員, 透過個人行事曆建立 Google Handout Meet 會議, 展示個人桌面操作, 開放 live stream, 並錄製至少 10 分鐘的個人期中簡報影片, 說明個人於 W1-W8 所完成的相關內容. \n 完成上述個人簡報錄製後, 將存於個人 Google Drive 中的期中簡報 mp4 影片, 以共享設置為所有登入 @gm 帳號的用戶都可以觀看. \n 完成上述影片共享設置後, 請登入 @gm 個人帳號, 至  https://forms.gle/T1Vs4sv9EdetxoWF7 \xa0 填寫表單並完成期中個人自評成績登錄. \n 完成上述各步驟後, 將繼續進行線上課程之其他內容直播或錄影. \n \n 2a \n https://drive.google.com/file/d/1kmu5oLunO6_97dDLZoQ2OzGh29KeMH91/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/120lV8i8yvKzEkF5kF2efpY-zuPc_G5kl/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n 2b \n https://drive.google.com/file/d/1LkVizKKucLDV2mUkOrBqhkUhIfFsRDbX/view?usp=sharing  (登入 @gm 帳號後可以在線觀看) \n W10 實體上課 \n 2a \n https://drive.google.com/file/d/1od9YBN9IEiJWqcfHKX_F9jWjytWSbjlS/view?usp=sharing \xa0 (登入 @gm 帳號後可以在線觀看) \n https://drive.google.com/file/d/1XbFbW7AD95kN2pl8MJWCzBdfE_W1V4Sy/view?usp=sharing \xa0 (登入 @gm 帳號後可以在線觀看) \n 2b \n Oauth2 client 連線設定流程說明: \n https://drive.google.com/file/d/1G4MzXUIbNRK7z2XdjtxXzhX51zHHwq85/view?usp=sharing \xa0 (登入 @gm 帳號後可以在線觀看) \n W11 \n Virtualbox 虛擬主機 NAT 設定與 X-win 連線  (登入 @gm 後可以在線觀看) \n Ubuntu 20.04 上的 CoppeliaSim 四輪車與 Windows 上的 Python Remote API 在 X-Windows 介面下協同控制影片  (登入 @gm 後可以在線觀看) \n 期中自評成績處理程式: \n import csv\n\n# read student list\nfilename = \'E:/wcm2020/data/tmp/2020_spring_score/2a/j1a_list.txt\'\nwith open(filename, encoding="utf-8") as f:\n    content = f.readlines()\nstudent = [x.strip() for x in content] \n#print(content)\n\n# Timestamp, email, 修課名稱, url, score, desp, memo\n# 0, 1, 2, 3, 4, 5, 6\n#total = 0\nall = {}\nwith open(\'y:/2020midterm.csv\', encoding="utf-8") as csv_file:\n    csv_reader = csv.reader(csv_file, delimiter=\',\')\n    \n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            #print(f\'Column names are {", ".join(row)}\')\n            line_count += 1\n        else:\n            student_num = row[1].split("@")[0]\n            #print(student_num)\n            student_score = row[3]\n            #print(student_score)\n            try:\n                all.update({student_num: student_score})\n            except:\n                all.update({student_num: "error"})\n            #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n            #print(f\'\\t{row[4]}\')\n            #total += int(row[4])\n            line_count += 1\nprint(all)\nprint(student)\n\'\'\'\nfor i in student:\n    \n    #if i in all:\n        #pass\n    #else:\n        #print(str(i))\n    \n    try:\n        print(i + "\\t" + all[i])\n    except:\n        print(i + "\\t60")\n\'\'\'\n\n    #print(f\'Processed {line_count} lines.\')\n    #print("平均=" + str(total/line_count))\n    \n\n \n', 'tags': '', 'url': 'W7-W11.html'}, {'title': 'W12-W18', 'text': 'Virtualbox Ubuntu 20.04\xa0 \n NatNetwork settings: \n Ipv4 and IPv6 Port forwarding setup \n Tutorial video 1  (for @gm users only) \n Tutorial video 2  (for @gm users only) \n', 'tags': '', 'url': 'W12-W18.html'}, {'title': 'Ubuntu commands', 'text': 'W12 Ubuntu 20.04 Virtualbox commands: \n 1  clear (清除畫面)\n2  sudo halt (關機)\n3  sudo apt install xorg\n4  sudo apt install fluxbox fluxconf\n5  sudo apt install lxde\n6  sudo reboot\n7  xterm&\n8  sudo apt install xterm\n9  sudo apt install firefox\n10  sudo apt install python3-pip\n11  sudo halt\n12  ls -l\n13  python3 list\n14  pip3 list\n15  pip3 install flask flask_cors lxml bs4 markdown pelican leo authomatic imutils numpy\n16  xterm&\n17  cd /etc/netplan\n18  ls -l\n19  sudo vi 00-installer-config.yaml\n20  sudo halt\n21  cd tmp\n22  ls -l\n23  mkdir tmp\n24  cd tmp\n25  git clone --recurse-submodules https://github.com/mdecourse/cd2020pj1.git\n26  cd cd2020pj1\n27  ls -l\n28  python3 wsgi.py\n29  cd docs\n30  ls -l\n31  cd cmsimde\n32  python3 wsgi.py\n33  cd ..\n34  cd wcm2020\n35  cd cmsimde\n36  python3 wsgi.py\n37  cd ..\n38  cd wcmj2020\n39  cd cmsimde\n40  python3 wsgi.py\n41  cd\n42  cd tmp\n43  ls -l\n44  git clone --recurse-submodules https://github.com/mdecourse/wcm2020.git\n45  git clone --recurse-submodules https://github.com/mdecourse/wcmj2020.git\n46  xterm&\n47  ping 140.130.17.254\n48  sudo netplan apply\n49  cd /etc/netplan\n50  ls -l\n51  sudo vi 00-installer-config.yaml\n52  sudo netplan apply\n53  ping 140.130.17.254\n54  leo&\n55  firefox&\n56  xterm&\n57  pwd\n58  ls -l\n59  python3 car_model.py\n60  sudo pip3 install opencv-python3\n61  sudo pip3 install opencv-python\n62  python3 car_model.py\n63  clear\n64  sudo apt install scite\n65  scite&\n66  pwd\n67  cd tmp\n68  ls -l\n69  cd self_driving_car\n70  ls -l\n71  cd CoppeliaSim_4_Self_Driving_Car_Simulation\n72  ls -l\n73  xterm&\n74  ls -l\n75  cd\n76  ls -l\n77  cd coppeliasim4_rev4\n78  ls -l\n79  cd CoppeliaSim_Edu_V4_0_0_Ubuntu18_04\n80  ls -l\n81  cd programming\n82  ls -l\n83  cd remoteApiBinds\n84  ls -l\n85  cd remoteApiBindings\n86  ls -l\n87  cd Lib\n88  ls -l\n89  cd lib\n90  ls -l\n91  cd lib\n92  ls -l\n93  cd Ubuntu18_04\n94  ls -l\n95  sudo cp remoteApi.so /home/kmol2020/tmp/self_driving_car/CoppeliaSim_4_Self_Driving_Car_Simulation\n96  kmol2020@kmol2020:~/tmp/self_driving_car/CoppeliaSim_4_Self_Driving_Car_Simulation\n97  cd /etc/netplan\n98  ls -l\n99  sudo vi 00-installer-config.yaml\n100  sudo netplan apply\n101  sudo vi 00-installer-config.yaml\n102  sudo netplan apply\n103  ping 2001:288:6004:17::254\n104  sudo halt\n105  xterm&\n106  ping www.google.com\n107  ifconfig\n108  ping6 2001:288:6004:17::254\n109  ping localhost\n110  ping 10.0.0.1\n111  ping 10.0.2.2\n112  ping 10.0.2.1\n113  ping 2001:288:6004:17::254\n114  ping 140.130.17.254\n115  cd /etc/netplan\n116  ls -l\n117  sudo vi 00-installer-config.yaml\n118  sudo netplan apply\n119  ping 140.130.17.254\n120  pwd\n121  cd\n122  ls -l\n123  cd tmp\n124  dir\n125  ls -l\n126  cd cd2020pj1\n127  git pull\n128  cd ..\n129  ls -l\n130  cd wcm2020\n131  git pull\n132  cd ..\n133  cd wcmj2020\n134  git pull\n135  ls -l\n136  cd ..\n137  ping 140.130.17.254\n138  ifconfig\n139  sudo apt install net-tools\n140  ifconfig\n141  ping 10.0.2.1\n142  clear\n143  ifconfig\n144  ping 140.130.17.254\n145  ifconfig\n146  sudo apt install net-tools\n147  ifconfig\n148  ping 140.130.17.254\n149  cd cd2020pj1\n150  python3 wsgi.py\n151  firefox&\n152  sudo halt\n153  firefox&\n154  xterm&\n155  xterm&\n156  cd tmp\n157  ls -l\n158  cd\n159  ls -l\n160  coppeliasim4&\n161  cd coppeliasim4_rev4\n162  ls -l\n163  mv C* coppeliasim4\n164  ls -l\n165  cd coppeliasim4\n166  ls -l\n167  ls -l cop*\n168  ./coppeliaSim.sh\n169  clear\n170  pwd\n171  ls -l\n172  cd coppeliasim_rev4\n173  mv co* copp4\n174  ls -l\n175  cd copp4\n176  ls -l\n177  cd coppeliasim4\n178  ls -l co*\n179  ./coppeliaSim.sh&\n180  leo&\n181  cd \n182  cd tmp\n183  cd cd2020pj1\n184  ls -l\n185  cd downloads\n186  ls -l\n187  nautilus&\n188  sudo apt install nautilus\n189  sudo netplan apply\n190  sudo apt install nautilus\n191  ls -l\n192  sudo rm *.pdf\n193  cd /etc/netplan\n194  ls -l\n195  sudo vi 00-installer-config.yaml\n196  sudo netplan apply\n197  sudo apt install nautilus\n198  sudo apt update\n199  firefox&\n200  sudo apt install nautilus\n201  ping 140.130.17.254\n202  ifconfig\n203  ping 140.130.17.254\n204  ifconfig\n205  ping 10.0.2.15\n206  ping 10.0.2.100\n207  ping 10.0.2.1\n208  ping 140.130.17.69\n209  sudo apt install nautilus\n210  ifconfig\n211  ping 140.130.17.254\n212  xterm&\n213  sudo vi 00-installer-config.yaml\n214  sudo netplan apply\n215  ping 140.130.17.4\n216  sudo apt install nautilus\n217  sudo apt update\n218  ping 140.130.17.254\n219  ping 140.130.17.4\n220  ping 168.95.1.1\n221  ping dns.mde.nfu.edu.tw\n222  cd /etc/apt\n223  sl -l\n224  ls -l\n225  cd apt.conf.d\n226  ls -l\n227  sudo vi proxy.conf\n228  sudo apt update\n229  sudo apt install nautils\n230  sudo apt install nautilus\n231  nautilus&\n232  ls -l\n233  sudo vi proxy.conf\n234  sudo apt update\n235  sudo apt autoremove\n236  ls -l\n237  sudo rm proxy.conf\n238  clear\n239  cd\n240  ifconfig\n241  ping 140.130.17.254\n242  ifconfig\n243  ping 10.0.2.15\n244  sudo netplan apply\n245  ping 140.130.17.254\n246  cd ..\n247  cd\n248  ls -l\n249  cd tmp\n250  cd cd2020pj1\n251  ls -l\n252  python3 wsgi.py\n253  firefox&\n254  xterm&\n255  ls -l\n256  cd tmp\n257  ls -l\n258  cd cd2020pj1\n259  ls -l\n260  python3 wsgi.py\n261  sudo vi wsgi.py\n262  python3 wsgi.py\n263  cd docs\n264  ls -l\n265  cd cmsimde\n266  ls -l\n267  vi wsgi.py\n268  python3 wsgi.py\n269  cd /etc/netplan\n270  ls -l\n271  sudo vi 00-installer-config.yaml\n272  ping 2001:288:6004:17::254\n273  ifconfig\n274  ping 10.0.2.15\n275  sudo halt\n276  xterm&\n277  pwd\n278  cd /etc/netplan\n279  pwd\n280  ls -l\n281  ls\n282  ls -l\n283  cd\n284  ls -a\n285  ls -l \n286  cd /etc/netplan\n287  ls -l\n288  sudo vi 00-installer-config.yaml\n289  ifconfig\n290  ping6 2001:288:6004:17::254\n291  firefox&\n292  ls -l\n293  cd tmp\n294  ls -l\n295  cd cd2020pj1\n296  git pull\n297  git config --global http.proxy http://[2001:288:6004:17::69]:3128\n298  git pull\n299  python3 wsgi.py\n300  cd ..\n301  cd \n302  cd tmp\n303  dir\n304  ls -l\n305  git clone https://github.com/mdecourse/cd2020pj1.git \n306  ifconfig\n307  cd\n308  history > history.txt \n \n', 'tags': '', 'url': 'Ubuntu commands.html'}, {'title': 'Windows', 'text': 'Use Firefox to conduct  https://meet.google.com  online meeting. Since we are using G Suite for Education, meeting recording and live stream functions are available. \n Use Firefox to connect to  https://youtube.com  and add live stream video with OBS streaming integrated withYoutube server.', 'tags': '', 'url': 'Windows.html'}, {'title': 'Ubuntu', 'text': 'Login to @gm account and download  Virtualbox appliance of Ubuntu 20.04  for CMSiMDE, Oauth2 and CoppeliaSim remote API program development. \n Install OBS for Ubuntu \n https://obsproject.com/wiki/install-instructions#ubuntu-installation \n', 'tags': '', 'url': 'Ubuntu.html'}, {'title': 'Mac', 'text': 'Use Safari to conduct  https://meet.google.com  online meeting. Since we are using G Suite for Education, meeting recording and live stream functions are available. \n Even with System Preferences to grant "Screen Recording" privacy setup, Firefox does not allow user to share screen operation during online Google Handout Meet session. \n Use Firefox to connect to  https://youtube.com  and add live stream video with OBS streaming integrated withYoutube server. \n', 'tags': '', 'url': 'Mac.html'}, {'title': 'CMS', 'text': 'Use Google + Domain API to setup login for @gm.nfu.edu.tw users \n https://console.developers.google.com \n Setup  OAuth 2.0 Client IDs  \n Use  https://github.com/authomatic/authomatic  to allow user login with Google or Github accounts. \n Get your oauth_gm.txt file content: \n \n Login to your @gm account \n Link to  https://console.developers.google.com \n Accept the license and\xa0 create Google API project \n Enable Google + Domain API \n Under Google + Domain API credentials, press CONFIGURE CONSENT SCREEN button \n Select Internal or External user type and add a new application name \n Under API and Services, enter into Credentials page \n Create " OAuth 2.0 Client IDs" type credential for Web Application \n Authorized JavaScript origins:  https://localhost:8443 \n Authorized redirect URIs:  https://localhost:8443/login/google/ \n Save your Client ID and Client secret into oauth_gm.txt \n \n URI settings for localhost: \n', 'tags': '', 'url': 'CMS.html'}, {'title': 'Flask', 'text': "Python and Flask \n Login to your gm email account and download  2019_ABeginnersGuideToPython3Programming.pdf \n Login to your gm email account and download  2019_BuildingRESTAPIsWithFlask.pdf \n Flask has two major components, Werkzeug and Jinja2. While Werkzeug is responsible for providing routing, debugging, and Web Server Gateway Interface (WSGI), Flask leverages Jinja2 as template engine. \n Basic Flask application: \n from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/') \ndef hello_world():\n    return 'Hello, From Flask!'\n\nif __name__== '__main__': \n\tapp.run() \n The preceding code imports the Flask library, initiates the application by creating an instance of the Flask class, declares the route, and then defines the function to execute when the route is called. This code is enough to start your first Flask application. \n The most important feature of REST is its statelessness, which simply means that neither the client nor the server has to know the state of each other to be able to communicate. In this way, both the client and the server can understand any message received without seeing the previous message. \n Realtime Communication \n https://www.vonage.com/resources/articles/real-time-communications/ \n https://www.fullstackpython.com/webrtc.html \n WebRTC \n https://av.tib.eu/media/20037 \n https://github.com/nanomosfet/WebRTC-Flask-server \n https://webrtchacks.com/webrtc-cv-tensorflow/ \n Streaming Server \n https://blog.miguelgrinberg.com/post/video-streaming-with-flask \n https://github.com/miguelgrinberg/flask-video-streaming \n https://opensource.com/article/19/1/gstreamer https://www.pyimagesearch.com/2019/04/15/live-video-streaming-over-network-with-opencv-and-imagezmq/ \n IOT \n https://dreamingecho.es/blog/internet-of-things-with-python-and-flask \n https://medium.com/@rovai/from-data-to-graph-a-web-jorney-with-flask-and-sqlite-6c2ec9c0ad0   \n", 'tags': '', 'url': 'Flask.html'}, {'title': 'Dart', 'text': 'Use dart2js to compile Dart html program into javascript and interacted with Flask program. \n \n   Clear Canvas   Draw ROC   Draw USA \n \n WebRTC \n https://pub.dev/packages/flutter_webrtc \n https://github.com/cloudwebrtc/flutter-webrtc \n', 'tags': '', 'url': 'Dart.html'}, {'title': 'Database', 'text': '', 'tags': '', 'url': 'Database.html'}, {'title': 'Linkages', 'text': '\n \n', 'tags': '', 'url': 'Linkages.html'}, {'title': 'Solvespace', 'text': 'https://github.com/solvespace/solvespace \n', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Pyslvs-UI', 'text': 'https://github.com/KmolYuan/Pyslvs-UI \n', 'tags': '', 'url': 'Pyslvs-UI.html'}, {'title': 'Range3', 'text': 'https://github.com/Range-Software/range3 \n', 'tags': '', 'url': 'Range3.html'}, {'title': 'Mechatronics', 'text': '', 'tags': '', 'url': 'Mechatronics.html'}, {'title': 'Arduino', 'text': 'https://www.makerspaces.com/wp-content/uploads/2017/02/Arduino-For-Beginners-REV2.pdf \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'Picsimlab', 'text': 'https://github.com/lcgamboa/picsimlab \n Download  picsimlab_0_7_5_win64_setup.exe  (only for @gm users) \n', 'tags': '', 'url': 'Picsimlab.html'}, {'title': 'Unoardusim', 'text': 'https://www.sites.google.com/site/unoardusim/ \n Download  UnoArduSimV2.7.1.zip  (only for @gm users) \n', 'tags': '', 'url': 'Unoardusim.html'}, {'title': 'CoppeliaSim', 'text': 'https://www.coppeliarobotics.com/ \n Download\xa0 CoppeliaSim_Edu_V4_0_0_Win.zip  (for @gm users only) \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'RemoteAPI', 'text': 'Download\xa0 web_vrep2.zip  (for @gm users only) \n Download\xa0 CoppeliaSim_4_Self_Driving_Car_Simulation.7z  (for @gm users only) \n When execute python remote api, opencv-python and imutils modules are needed. \n pip install opencv-python \n pip install imutils \n DefaultCamera with threaded child script and start the simRemoteApi on port 19999. \n simRemoteApi.start(19999) \n Therefore user can control the simulated model through the CoppeliaSim_Server_IP on port 19999. \n clientID = vrep.simxStart(\'CoppeliaSim_Server_IP\',19999,True,True,5000,5) # Get the client ID \n Use \n While True: \n to replace \n for i in range(150): \n the image of the remote vision sensor will be sent to the remote API client through  https://pypi.org/project/opencv-python/ \n reading and display vision sensor image using python remoate api ( 來源 ) \n 改為 Python 3 相容 \n # -*- coding: utf-8 -*-\n"""\nCreated on Sun Jul 05 15:01:58 2015\n\n@author: ACSECKIN\n\npython -m pip install opencv-python\n"""\n\nimport vrep\nimport time\nimport cv2\nimport numpy as np\n\nvrep.simxFinish(-1)\n\nclientID = vrep.simxStart(\'127.0.0.1\', 19997, True, True, 5000, 5)\n\nif clientID!=-1:\n    print(\'Connected to remote API server\')\n    print(\'Vision Sensor object handling\')\n    res, v1 = vrep.simxGetObjectHandle(clientID, \'vs1\', vrep.simx_opmode_oneshot_wait)\n    print(\'Getting first image\')\n    err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v1, 0, vrep.simx_opmode_streaming)\n    while (vrep.simxGetConnectionId(clientID) != -1):\n        err, resolution, image = vrep.simxGetVisionSensorImage(clientID, v1, 0, vrep.simx_opmode_buffer)\n        if err == vrep.simx_return_ok:\n            print("image OK!!!")\n            img = np.array(image,dtype=np.uint8)\n            img.resize([resolution[1],resolution[0],3])\n            cv2.imshow(\'image\',img)\n            if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n                break\n        elif err == vrep.simx_return_novalue_flag:\n            print("no image yet")\n            pass\n        else:\n          print(err)\nelse:\n  print("Failed to connect to remote API Server")\n  vrep.simxFinish(clientID)\n\ncv2.destroyAllWindows() \n pythonBubbleRob.pdf \n lua_one_link_remote_api.7z \n V-rep 系統目錄中的\xa0remoteApiConnections.txt 可以同時啟動多個 port 允許多 client 連線: \n // This file defines all the continuous remote API server services (started at remote API plugin initialization, i.e. V-REP start-up)\n//\n// Each remote API server service requires following 3 entries:\n//\n// portIndex@_port = xxxx               // where xxxx is the desired port number (below 19997 are preferred for server services starting at V-REP start-up)\n// portIndex@_debug = xxxx              // where xxxx is true or false\n// portIndex@_syncSimTrigger = xxxx     // where xxxx is true or false. When true, then the service will be pre-enabled for synchronous operation.\n//\n// In above strings, @ can be any number starting with 1. If more than one server service is required, then numbers need to be consecutive and starting with 1\n\n// Let\'s start a continuous remote API server service on port 19997:\nportIndex1_port             = 19997\nportIndex1_debug            = false\nportIndex1_syncSimTrigger   = true\n\nportIndex2_port             = 19998\nportIndex2_debug            = false\nportIndex2_syncSimTrigger   = true\n \n 在遠端的多台電腦, 可以利用 \n clientID = vrep.simxStart(\'Server_IP\', 19997, True, True, 5000, 5) \n 與 \n clientID = vrep.simxStart(\'Server_IP\', 19998, True, True, 5000, 5) \n 同時對 rempte API server 進行操控, 各 client 並可以透過上述程式取得 rempte API Server 運作時的影像, 以便利用各 client 中的 python 程式對遠端 V-rep 模擬進行遠端操控. \n 例如: 兩名使用者分別在不同電腦上對同一台 rempte API Server 中的不同四輪車模型進行操控. \n 以下為另外一個參考程式: \n import vrep\n\nprint(\'Program started\')\nvrep.simxFinish(-1) # just in case, close all opened connections\nclientID=vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5)\nif clientID!=-1:\n    print(\'Connected to remote API server\')\n    res,v0=vrep.simxGetObjectHandle(clientID,\'Vision_sensor\',vrep.simx_opmode_oneshot_wait)\n    res,v1=vrep.simxGetObjectHandle(clientID,\'PassiveVision_sensor\',vrep.simx_opmode_oneshot_wait)\n\n    res,resolution,image=vrep.simxGetVisionSensorImage(clientID,v0,0,vrep.simx_opmode_streaming)\n    while (vrep.simxGetConnectionId(clientID)!=-1):\n        res,resolution,image=vrep.simxGetVisionSensorImage(clientID,v0,0,vrep.simx_opmode_buffer)\n        if res==vrep.simx_return_ok:\n            res=vrep.simxSetVisionSensorImage(clientID,v1,image,0,vrep.simx_opmode_oneshot)\n    vrep.simxFinish(clientID)\nelse:\n    print(\'Failed connecting to remote API server\')\nprint(\'Program ended\') \n 此外 system 目錄下的\xa0usrset.txt 可以進行客製化設定 \n 參考資料 \n Virtual Experiments Design for Robotics Based on V-REP.pdf \n Pyrep: bringing V-rep to deep robot learning.pdf \n Controlling your robot with Python.pdf \n', 'tags': '', 'url': 'RemoteAPI.html'}, {'title': 'Self-driving car ex', 'text': '以下所使用的場景與原始控制程式: \n Download\xa0 CoppeliaSim_4_Self_Driving_Car_Simulation.7z  (for @gm users only) \n 設定 CoppeliaSim 目錄中的 remoteApiConnections.txt 檔, 啟動時開啟內建的 19997 與 19999 埠號. \n remoteApiConnections.txt \n // This file defines all the continuous remote API server services (started at remote API plugin initialization, i.e. CoppeliaSim start-up)\n//\n// Each remote API server service requires following 3 entries:\n//\n// portIndex@_port = xxxx               // where xxxx is the desired port number (below 19997 are preferred for server services starting at CoppeliaSim start-up)\n// portIndex@_debug = xxxx              // where xxxx is true or false\n// portIndex@_syncSimTrigger = xxxx     // where xxxx is true or false. When true, then the service will be pre-enabled for synchronous operation.\n//\n// In above strings, @ can be any number starting with 1. If more than one server service is required, then numbers need to be consecutive and starting with 1\n\n// Let\'s start a continuous remote API server service on port 19997:\nportIndex1_port             = 19997\nportIndex1_debug            = false\nportIndex1_syncSimTrigger   = true\n\nportIndex2_port             = 19999\nportIndex2_debug            = false\nportIndex2_syncSimTrigger   = true\n \n 然後利用 CoppeliaSim 已經開啟的 19999 埠號, 從 client 端以 Python remote API 程式控制遠端 Server 上的機電系統, 主要關鍵在於啟動連線, 開啟場景檔案, 然後啟動該場景的模擬後, 取得遠端模擬  vision sensor  的影像後進行 remote 操控: \n 有關 vision sensor 與 camera 的差異: \n Make sure not to mix-up vision sensors with  cameras . Following are the main differences: \n \n \n A vision sensor has a fixed resolution. A camera has no specific resolution (i.e. it adjusts automatically to the view size). \n A vision sensor\'s image content can be accessed via the  API , and image processing handles via  vision callback functions . A camera\'s image content is not directly available via the API. \n A vision sensor generally requires more CPU time and operates slower than cameras. \n A vision sensor can only display  renderable objects . A camera can display all  object types . \n \n \n Vision sensors are added to the  scene  with [menu bar --> Add --> Vision sensor]. \n clientID = vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5) # Get the client ID\nres=vrep.simxLoadScene(clientID,"Y:\\CoppeliaSim_4_Self_Driving_Car_Simulation\\sdc.ttt",0,vrep.simx_opmode_blocking)\nx =vrep.simxStartSimulation(clientID,vrep.simx_opmode_oneshot_wait)  \n 以下則為完整的 car_model.py: \n # -*- coding: utf-8 -*-\n"""\nCreated on Tue Jan 06 22:00:39 2015\n\n@author: Karan Vivek Bhargava\n"""\n#Import Libraries:\nimport vrep                  #V-rep library\nimport sys\nimport time                #used to keep track of time\nimport numpy as np         #array library\nimport cv2\nimport imutils\n\n# Model for the car with two variables throttle and steering\nclass CarControl():\n    def __init__(self, clientID, printFlag = False):\n        self.clientID = clientID;\n        # retrieve motor  handles\n        errorCode, self.steer_handle = vrep.simxGetObjectHandle(self.clientID, \'steer_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.motor_handle = vrep.simxGetObjectHandle(self.clientID, \'motor_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.fl_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'fl_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.fr_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'fr_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.bl_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'bl_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.br_brake_handle = vrep.simxGetObjectHandle(self.clientID, \'br_brake_joint\', vrep.simx_opmode_oneshot_wait);\n        errorCode, self.camera_f_handle = vrep.simxGetObjectHandle(self.clientID, \'cam_f\', vrep.simx_opmode_oneshot_wait);\n        \n        vrep.simxGetVisionSensorImage(self.clientID, self.camera_f_handle, 0, vrep.simx_opmode_streaming)\n        print(\'Received Handles...\');\n\n        self.factor = 30/(2.68*3.6);\n        self.max_throttle = 19; # Kmph\n        self.max_reverse_throttle = -19; #Kmph\n        self.max_steer = 30; # Degrees\n\n        self.printFlag = printFlag;\n        \n        # Self test the camera\n        print(\'Setting up the camera system...\');\n        self.lastFrame = None;\n        err = 0;\n        while(err != 1):\n            err, self.lastFrame = self.get_image();\n        print(\'Camera setup successful.\')\n        \n\n    def set_throttle(self, target_speed):\n        if(target_speed > self.max_throttle):\n            target_speed = self.max_throttle;\n        elif(target_speed < self.max_reverse_throttle):\n            target_speed = self.max_reverse_throttle;\n        if(self.printFlag):\n            print(\'Setting throttle to\', target_speed);\n        speed = target_speed * self.factor;\n        errorCode = vrep.simxSetJointTargetVelocity(self.clientID, self.motor_handle, speed, vrep.simx_opmode_streaming);\n\n    def set_steering(self, steer_pos):\n        if(abs(steer_pos) > self.max_steer):\n            if(steer_pos > 0):\n                steer_pos = self.max_steer;\n            else:\n                steer_pos = -self.max_steer;\n        if(self.printFlag):\n            print(\'Setting steering to\', steer_pos);\n        # Convert to radians\n        steer_pos = np.deg2rad(steer_pos);        \n        errorCode = vrep.simxSetJointTargetPosition(self.clientID, self.steer_handle, steer_pos, vrep.simx_opmode_streaming);\n\n    def get_info(self):\n        # Check velocity\n        err, bl_wheel_vel = vrep.simxGetObjectFloatParameter(self.clientID, self.bl_brake_handle, vrep.sim_jointfloatparam_velocity, vrep.simx_opmode_streaming);\n        err, br_wheel_vel = vrep.simxGetObjectFloatParameter(self.clientID, self.br_brake_handle, vrep.sim_jointfloatparam_velocity, vrep.simx_opmode_streaming);\n        rear_wheel_velocity = ((bl_wheel_vel) + (br_wheel_vel))/2.0;\n        linear_velocity = rear_wheel_velocity * 0.09 * 3.6; # Kmph\n\n        throttle = linear_velocity;\n        steer_errorCode, steer_pos = vrep.simxGetJointPosition(self.clientID, self.steer_handle, vrep.simx_opmode_streaming);\n        if(self.printFlag):\n            print(\'Throttle:\', throttle, \'Steering:\', steer_pos);\n\n    def get_image(self):\n        err, resolution, image = vrep.simxGetVisionSensorImage(self.clientID, self.camera_f_handle, 0, vrep.simx_opmode_buffer);\n        if err == vrep.simx_return_ok:\n            img = np.array(image,dtype=np.uint8);\n            img.resize([resolution[1],resolution[0],3]);\n            self.lastFrame = imutils.rotate_bound(img, 90);\n            return 1, self.lastFrame;\n        elif err == vrep.simx_return_novalue_flag:\n            return 0, None;\n        else:\n            return err, None;\n\nvrep.simxFinish(-1) # just in case, close all opened connections\nclientID = vrep.simxStart(\'127.0.0.1\',19999,True,True,5000,5) # Get the client ID\nres=vrep.simxLoadScene(clientID,"Y:\\CoppeliaSim_4_Self_Driving_Car_Simulation\\sdc.ttt",0,vrep.simx_opmode_blocking)\nx =vrep.simxStartSimulation(clientID,vrep.simx_opmode_oneshot_wait) \n\nif clientID!=-1:  #check if client connection successful\n    print(\'Connected to remote API server\')\n    \nelse:\n    print(\'Connection not successful\')\n    sys.exit(\'Could not connect\')\n\n# Initialize car control object\ncar = CarControl(clientID, printFlag = False);\ncar.set_steering(20); # Degrees\ncar.set_throttle(1);  # Kmph\n\nfor i in range(150):\n    # Start time for image process\n    start = time.time();\n\n    err, img = car.get_image();\n\n    # End time for image process\n    end = time.time();\n\n    dt = end - start;\n    print(\'Frame took:\', dt*1000.0, \'ms\');\n    cv2.imshow(\'image\',img);\n    cv2.waitKey(1); # in milliseconds\n     \n', 'tags': '', 'url': 'Self-driving car ex.html'}, {'title': 'Webots', 'text': 'https://cyberbotics.com/ \n \n \n', 'tags': '', 'url': 'Webots.html'}]};